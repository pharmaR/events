---
author: "Aaron Clark"
format: rvalhub-revealjs
html:
    self-contained: true
    fontsize: 30
editor: visual
---

## Shiny for R-Package Risk Assessment

<br>

::: columns
::: {.column width="80%"}
![](images/title_app_page.png)

Aaron Clark, 16 Aug 2023
:::

::: {.column width="20%"}
<!-- ![](images/riskassessment_logo.png)  -->

<img src="images/riskassessment_logo.png" height="172" style="height:172px; margin-left:15px"/>

![](images/pharmaverse_logo.png)
:::
:::









## Disclaimer

</br></br></br>

*Any opinions expressed in this presentation and on the following slides are solely those of the presenter and do not necessarily reflect those sponsoring the work*




## Agenda

* Quick Intro to `{riskmetric}` / `{riskassessment}`

* Why create a shiny app?

* Latest enhancements

* Demo

* Coming soon

* Q&A




---

::: columns
::: {.column width="90%"}

<!-- ![](images/pharmaRlogo_large.png) -->

<img src="images/pharmaRlogo_large.png" style="height:190px"/>

<div style="font-size:32px">
* Consortia of ~50 companies (mostly pharma and biotech)

* Focus on designing/building a framework to validate R and R packages with an eye to all open-source software.

* The main goal is ensuring proper validation documentation exists in accordance with expectations of regulatory agencies.

Checkout <b>[pharmar.org](https://www.pharmar.org/)</b> to learn about all work streams and get involved!
</div>


:::
:::





## Two tools: what do they do

::: columns
::: {.column width="20%"}
![](images/riskmetric_logo.png) <br><br> ![](images/riskassessment_logo.png)
:::

::: {.column width="75%" style="font-size:28px"}
is a framework to quantify an R package's "risk" by assessing several meaningful metrics designed to evaluate package development best practices, code documentation, community engagement, and development sustainability.<br><br><br> is a full-fledged R package containing a shiny front-end that augments the utility of `{riskmetric}`. The application's goal is to provide a central hub for an organization to review and assess the risk of R packages, providing handy tools and guide rails along the way.
:::
:::








## Quantify risk programmatically

::: columns
::: {.column width="20%"}
![](images/riskmetric_logo.png)
:::

::: {.column width="80%"}
::: {style="font-size:28px"}
Sometimes "quality" is measurable! Software dev best practices dictate an R-package should have:<br>

-   A license
-   Source code available for browsing
-   An easy to contact maintainer
-   A place to report bugs
-   Evidence that new bugs are being addressed
-   Complete Function documentation
-   Adequate test coverage
-   Community usage

18 total assessments (to date)!
:::
:::
:::









## Why create a Shiny app? {auto-animate=true .scrollable}

::: columns
::: {.column width="20%"}
![](images/riskassessment_logo.png)
:::

::: {.column width="80%"}
::: {style="font-size:24px" .incremental}
<br><b>Main goal</b>: help those those making "package inclusion" requests for GxP environments. So, the app's highest and best use is all about two things:

- Forcing org members to take responsibility for assessing package risk themselves prior to making an IT request
- Generating a summary report for IT that shows the requester has done their due diligence meeting inclusion requirements


:::
:::
:::

. . .

![](images/user_to_example_report_to_it_sm.png)





## Why create a Shiny app? (cont'd)

::: columns
::: {.column width="20%"}
![](images/riskassessment_logo.png)
:::

::: {.column width="80%"}
::: {style="font-size:24px" .incremental}
<b>Main goal</b>: help those those making "package inclusion" requests for GxP environments. They need support to...

-   Provide a platform for package exploration without the need to write any custom `{riskmetric}`
-   Run `{riskmetric}` on the same machine with the same environment -- creating a central hub for reproducibility
-   Maintain consistent, org-specific settings/options when producing risk outputs
-   Automate a risk-based "decision triage" based on pre-defined rules, saving time & effort
-   Manage who's involved in the review process via user authentication & role management
-   Facilitate and store user summaries & communication, on certain packages and/or certain metrics
-   Generate risk summary reports, for sharing with the decision making parties
:::
:::
:::

















## Latest features (v2.0.0)

::: {style="font-size:28px" .incremental}
Most notably:

* Face lift to the `'Report Builder'` & `'Database View'`
* Better support to analyze dependencies
* More org-level customization, including the use of a configuration file 
* Allow `admin` users to edit roles and privileges on the fly
* Allow users to explore source contents of package

:::

. . .

::: {style="font-size:28px"}
<br>
The feedback loop is crucial! Submit an issue on GitHub today.

![](images/github.png)

:::





## Latest: `'Report Builder'` Face Lift {.scrollable}

::: {style="font-size:32px" .incremental}
* A more holistic Report Builder! Allowing users to define what content shows up in the report.


* Users can now compose a long form "Package Summary" to keep track of more pertinent items (perhaps non-`{riskmetric}` items) for a more rounded package review.
:::

. . . 
  

![](images/report_builder.gif)
  
  
  
  
  
  
## Latest: `'Database View'` Face Lift {.scrollable}
  

::: {style="font-size:28px" .incremental}
More useful content to ingest!

  * A summary of uploaded packages
  * Date uploaded
  * Decision-related columns like the decision time stamp & decision source
  * Easily downloadable
  
:::

. . .


![](images/uploaded_pkgs.png)


  
  

## Latest: Package Dependencies {.scrollable}


![](images/dependencies.png)
  
![](images/rev_dependencies.png)
  
  
  
  
## Latest: org-level settings {.scrollable}


::: {style="font-size:24px" .incremental}
Edit in-app or via the config file! What's new?

* Customize decision categories & colors
* Toggle decision automation rules
* User roles/privileges
* Initialize metric weights

:::

. . .

::: {style="font-size:24px"}
Example config (YML) file:

```yml
default:
  assessment_db: database.sqlite
  loggit_json: loggit.json
  credential_db: credentials.sqlite
  credentials:
    roles:
      - admin
      - lead
      - reviewer
      - viewer
    privileges:
      admin: [admin, weight_adjust, auto_decision_adjust, final_decision, revert_decision, add_package, delete_package, overall_comment, general_comment]
      lead: [weight_adjust, auto_decision_adjust, final_decision, revert_decision, add_package, delete_package, overall_comment, general_comment]
      reviewer: [add_package, general_comment]
      viewer:
  decisions:
    categories:
      - Low Risk
      - Medium Risk
      - High Risk
    rules:
      Medium Risk:
        - .398
        - .639
      High Risk:
        - .639
        - 1
    colors:
      Medium Risk: !expr grDevices::rgb(52, 235, 229, maxColorValue = 255)
  metric_weights:
    covr_coverage: 0
    has_vignettes: 2
```

<br>
<br>

Automated a risk-based "decision triage" based on pre-defined rules, saving time & effort



![](images/decision_rules.png)

Decisions impacted upon pkg upload:

![](images/uploaded_pkgs_med.png)

:::






## Latest: Edit Roles & Privileges {.scrollable}

::: {style="font-size:28px"}
Manage who's involved in the review process via user authentication & role management

![](images/add_edit_users.png)

![](images/roles_privileges.png)

![](images/edit_roles.png)

:::





## Latest: Explore Package Source Code {.scrollable}


::: {style="font-size:28px"}
Augment {riskmetric} evaluation with a more manual package review process by browsing source code


![](images/source_explorer.png)
![](images/source_explorer_tests.png)


:::






## Latest features recap (v2.0.0)

::: {style="font-size:28px"}
Most notably:

* Face lift to the `'Report Builder'` & `'Database View'`
* Better support to analyze dependencies
* More org-level customization, including the use of a configuration file 
* Allow `admin` users to edit roles and privileges on the fly
* Allow users to explore source contents of package


<br>

The feedback loop is crucial! Submit an issue on GitHub today.

![](images/github.png)

:::








## An exercise: Review the `{prodlim}` package

::: columns
::: {.column width="20%"}
![](images/riskassessment_logo_large.png)
:::

::: {.column width="80%" style="font-size:48px"}
<br> Demo on [Shinyapps.io](https://rinpharma.shinyapps.io/riskassessment_v200/)!

<br> Test drive now: [bit.ly/raa_demo](https://rinpharma.shinyapps.io/riskassessment_v200/)
:::
:::








## Coming soon {.scrollable}

#### {riskscore}

::: {style="font-size:32px" }
In it's early stages, a new data package containing the `{riskmetric}` assessments & scores for all packages on CRAN.

![](images/risk_scores_by_group_all_cran.png)

:::








## Coming soon {.scrollable}

#### Package Explorer

::: {style="font-size:32px" }

A suite of hands-on review tools (from our friends at GSK) will allow users to browse unit tests, source code, and man (doc) pages for any exported function.

![](images/pkg_explorer.png)

:::









## Dev Team

![](images/team.png)





## Q & A {.scrollable}



::: columns
<!-- ::: {.column width="10%"} -->
<!-- <br> -->
<!-- ::: -->

::: {.column width="50%" style="font-size:32px"}

<!-- ![](images/riskassessment_logo.png) -->
<img src="images/riskassessment_logo.png" height="172" style="height:172px; margin-left:15px"/>

bit.ly/raa_demo<br>

![](images/github_no_margin.png)

bit.ly/raa_gh

:::

::: {.column width="50%" style="font-size:32px" }


![](images/google_forms.png)

bit.ly/raa_survey<br>


![](images/pharmar_logo_sm.png)

pharmar.org/

:::
:::


